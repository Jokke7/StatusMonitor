// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ValidStatusMonitor.Models;

namespace ValidStatusMonitor.Migrations
{
    [DbContext(typeof(ValidStatusMonitorContext))]
    [Migration("20191018074320_AddColStorageContainerNameToStatusTable")]
    partial class AddColStorageContainerNameToStatusTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ValidStatusMonitor.DataModel.DscReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dsc3dViewerSetting")
                        .HasMaxLength(100);

                    b.Property<string>("DscAppEnvironment")
                        .HasMaxLength(100);

                    b.Property<string>("DscAppMinServiceLevel")
                        .HasMaxLength(100);

                    b.Property<string>("DscAppVersion")
                        .HasMaxLength(100);

                    b.Property<int?>("DscDbMaxSettingDtu");

                    b.Property<int?>("DscDbMaxSettingSizeMb");

                    b.Property<string>("DscDbMinServiceLevel")
                        .HasMaxLength(100);

                    b.Property<string>("DscDbServerEnvironment")
                        .HasMaxLength(100);

                    b.Property<string>("DscDbVersion")
                        .HasMaxLength(100);

                    b.Property<int?>("DscMaxStorageBlobSizeMb")
                        .HasMaxLength(100);

                    b.Property<string>("DscMinStorageServiceLevel")
                        .HasMaxLength(100);

                    b.Property<string>("DscPdfViewerSetting")
                        .HasMaxLength(100);

                    b.Property<string>("Environment")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdate");

                    b.HasKey("Id");

                    b.ToTable("Dscreference");
                });

            modelBuilder.Entity("ValidStatusMonitor.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ValidStatusMonitor.Models.InstallationAssets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ApplicationLicenceId")
                        .HasColumnName("APPLICATION_LICENCE_ID")
                        .HasMaxLength(100);

                    b.Property<string>("ApplicationName")
                        .HasColumnName("APPLICATION_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("ApplicationResourceGroup")
                        .HasColumnName("APPLICATION_RESOURCE_GROUP")
                        .HasMaxLength(80);

                    b.Property<string>("CustomDomainName")
                        .HasColumnName("CUSTOM_DOMAIN_NAME")
                        .HasMaxLength(255);

                    b.Property<int>("CustomerId")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("DatabaseName")
                        .HasColumnName("DATABASE_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("DatabaseResourceGroup")
                        .HasColumnName("DATABASE_RESOURCE_GROUP")
                        .HasMaxLength(50);

                    b.Property<string>("DatabaseServer")
                        .HasColumnName("DATABASE_SERVER")
                        .HasMaxLength(100);

                    b.Property<string>("EndpointTestUri")
                        .IsRequired()
                        .HasColumnName("ENDPOINT_TEST_URI")
                        .HasMaxLength(255);

                    b.Property<string>("InstCode")
                        .HasColumnName("INST_CODE")
                        .HasMaxLength(10);

                    b.Property<string>("PlantName")
                        .HasColumnName("PLANT_NAME")
                        .HasMaxLength(32);

                    b.Property<string>("SlotSetting")
                        .HasColumnName("SLOT_SETTING")
                        .HasMaxLength(32);

                    b.Property<string>("SslThumbprint")
                        .HasColumnName("SSL_THUMBPRINT")
                        .HasMaxLength(255);

                    b.Property<string>("StorageAccountKey")
                        .HasColumnName("STORAGE_ACCOUNT_KEY")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("InstallationAssets");
                });

            modelBuilder.Entity("ValidStatusMonitor.Models.InstallationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("AppResourceLink")
                        .HasColumnName("APP_LINK");

                    b.Property<string>("ApplicationInfo")
                        .HasColumnName("APPLICATION_INFO")
                        .HasMaxLength(255);

                    b.Property<string>("ApplicationName")
                        .HasColumnName("APPLICATION_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("ApplicationServiceHealth")
                        .HasColumnName("APPLICATION_SERVICE_HEALTH")
                        .HasMaxLength(80);

                    b.Property<string>("ApplicationVersion")
                        .HasColumnName("APPLICATION_VERSION")
                        .HasMaxLength(50);

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("DatabaseName")
                        .HasColumnName("DATABASE_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("DatabaseServer")
                        .HasColumnName("DATABASE_SERVER")
                        .HasMaxLength(100);

                    b.Property<string>("DatabaseServiceHealth")
                        .HasColumnName("DATABASE_SERVICE_HEALTH")
                        .HasMaxLength(80);

                    b.Property<string>("DatabaseServiceLevel")
                        .HasColumnName("DATABASE_SERVICE_LEVEL")
                        .HasMaxLength(50);

                    b.Property<int?>("DatabaseSizeMb")
                        .HasColumnName("DATABASE_SIZE_MB");

                    b.Property<string>("DatabaseTemplate")
                        .HasColumnName("DATABASE_TEMPLATE")
                        .HasMaxLength(80);

                    b.Property<string>("DatabaseVersion")
                        .HasColumnName("DATABASE_VERSION")
                        .HasMaxLength(50);

                    b.Property<string>("DbResourceLink")
                        .HasColumnName("DB_LINK");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255);

                    b.Property<string>("E2eTestUri")
                        .HasColumnName("E2E_TEST_URI");

                    b.Property<bool?>("Enabled3dViewer")
                        .HasColumnName("ENABLED_3D_VIEWER");

                    b.Property<bool?>("EnabledPdfTron")
                        .HasColumnName("ENABLED_PDFTRON_VIEWER");

                    b.Property<string>("Environment")
                        .HasColumnName("ENVIRONMENT")
                        .HasMaxLength(80);

                    b.Property<string>("HttpResponseE2eTest")
                        .HasColumnName("HTTP_RESPONSE_E2E_TEST");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LAST_UPDATE")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LicenceExpiryDate")
                        .HasColumnName("LICENCE_EXPIRY_DATE");

                    b.Property<string>("LicenceNumber")
                        .HasColumnName("LICENCE_NUMBER");

                    b.Property<string>("LicenceServer")
                        .HasColumnName("LICENCE_SERVER");

                    b.Property<string>("PdfTronLicence")
                        .HasColumnName("PDFTRON_LICENCE");

                    b.Property<DateTime?>("PdfTronLicenceExpiryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PDFTRON_LICENCE_EXPIRY_DATE")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PlantName")
                        .HasColumnName("PLANT_NAME")
                        .HasMaxLength(80);

                    b.Property<string>("SlotSetting")
                        .HasColumnName("SLOT_SETTING");

                    b.Property<DateTime?>("SslExpiryDate")
                        .HasColumnName("SSL_EXPIRY_DATE");

                    b.Property<string>("SslFriendlyName")
                        .HasColumnName("SSL_FRIENDLY_NAME")
                        .HasMaxLength(120);

                    b.Property<string>("SslResourceLink")
                        .HasColumnName("SSL_LINK");

                    b.Property<string>("SslStatus")
                        .HasColumnName("SSL_STATUS")
                        .HasMaxLength(50);

                    b.Property<string>("StorageAccountName")
                        .HasColumnName("STORAGE_NAME")
                        .HasMaxLength(80);

                    b.Property<int?>("StorageBlobNfiles")
                        .HasColumnName("STORAGE_BLOB_NFILES");

                    b.Property<int?>("StorageBlobSizeMb")
                        .HasColumnName("STORAGE_BLOB_SIZE_MB");

                    b.Property<string>("StorageContainerName")
                        .HasColumnName("STORAGE_CONTAINER_NAME")
                        .HasMaxLength(80);

                    b.Property<string>("StorageResourceLink")
                        .HasColumnName("STORAGE_LINK");

                    b.Property<string>("StorageServiceHealth")
                        .HasColumnName("STORAGE_SERVICE_HEALTH")
                        .HasMaxLength(80);

                    b.Property<string>("StorageServiceLevel")
                        .HasColumnName("STORAGE_SERVICE_LEVEL")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("InstallationStatus");
                });

            modelBuilder.Entity("ValidStatusMonitor.Models.InstallationAssets", b =>
                {
                    b.HasOne("ValidStatusMonitor.Models.Customer", "Customer")
                        .WithMany("InstallationAssets")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_Assets_CustomerID");
                });

            modelBuilder.Entity("ValidStatusMonitor.Models.InstallationStatus", b =>
                {
                    b.HasOne("ValidStatusMonitor.Models.Customer", "Customer")
                        .WithMany("InstallationStatus")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_Status_CustomerID");

                    b.HasOne("ValidStatusMonitor.Models.InstallationAssets", "InstallationAssets")
                        .WithOne("Status")
                        .HasForeignKey("ValidStatusMonitor.Models.InstallationStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
